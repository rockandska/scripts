#!/bin/bash
set -euo pipefail

# Original script by Pawel Krupa (@paulfantom)
# https://github.com/cloudalchemy/ansible-grafana/blob/7bb4a6f57740edfaeec24184f62d4b62035bbe58/.travis/releaser.sh
# Update by rockandska
#
# Script to automatically do a couple of things:
#   - generate a new tag according to semver (https://semver.org/)
#   - generate CHANGELOG.md by using https://github.com/skywinder/github-changelog-generator
#
# Tags are generated by searching for a keyword in last commit message. Keywords are:
#  - [patch] or [fix] to bump patch number
#  - [minor], [feature] or [feat] to bump minor number
#  - [major] or [breaking change] to bump major number
# All keywords MUST be surrounded with square braces.
#
# Requirements:
#   - GIT_TOKEN variable set with GitHub token. Access level: repo.public_repo
#   - docker
#   - git-semver python package (pip install git-semver)
#
# Output:
# - stdout:
#     - the tag generated or previously generated by the current commit
#     - empty if there is no release keyword found in the commit message
#       or if the commit is relate to a tag but is not the commit who tag it
# - stderr: everything else

# Redirect stdout/stderr output by default to stderr
# Will use fd 3 to print only to stdout the tag foudn/generated
exec 3>&1
exec &> /dev/stderr

##################
# User variables #
##################

[[ -n ${MKRELEASE_DEBUG-} ]] && set -x
: ${MKRELEASE_DUMMY:=}

: ${GIT_TOKEN:=}
: ${GIT_REPOSITORY_TYPE:=github}
: ${GIT_DEFAULT_BRANCH:=master}
: ${GIT_EMAIL:=$(git show -s --format='%ae')}
: ${GIT_USER:=$(git show -s --format='%an')}
: ${SKIP_LABEL:=ci skip}
: ${SKIP_LABELS:=ci skip|skip}

git_remote=$(git config --get remote.origin.url)
git_commit=$(git rev-parse HEAD)
git_commit_message=$(git rev-list --format=%B --max-count=1 ${git_commit} | tail -n +2)
git_tags_arr=($(git tag --contains 2> /dev/null))
git_autotag_message="Automatic tag generation from commit ${git_commit}"

#############################
# Do some conditional tests #
#############################

# commit_message !~ /\[skip\]/
[[ ! "${git_commit_message}" =~ .*(\[(${SKIP_LABELS})\]).* ]] \
  || { >&2 echo "Found ${BASH_REMATCH[1]} in commit message. Skipping....."; exit 0; }

# branch = master
[[ $(git branch --contains ${git_commit} | grep " ${GIT_DEFAULT_BRANCH}$") ]] \
  || { >&2 echo "Fatal: $0 should only be launch on commit part of '${GIT_DEFAULT_BRANCH}' branch !"; exit 1; }

##########################################################
# If the current commit is already part of a tag :       #
# - previous run who failed somewhere                    #
# - rerun tests on old commit                            #
# echo the tag generated by the current commit if exists #
# else empty then exit 0                                 #
##########################################################
if [[ ${#git_tags_arr[@]} -ne 0 ]];then
  >&2 echo "Commit '${git_commit}' is already part of '$(printf "%s " ${git_tags_arr[@]} | sed s'/ $//')' tag(s)"
  git_tag_found=$(git tag -n | grep "${git_autotag_message}" | awk '{print $1}' || true)
  if [[ -n "${git_tag_found}" ]];then
    >&2 echo "and '${git_tag_found}' tag was generated by '${git_commit}'"
  else
    >&2 echo "but none of them seems generated by '${git_commit}'"
  fi
  >&3 echo "${git_tag_found}"
  exit 0
fi

################
# Parse remote #
################

[[ "${git_remote}" =~ ^(([^:/]+)://)?(([^/:@]+)?(:([^/:@]+))?@)?([^~/:@]+)?(:(\d+))?:?(.*)/([^/]+)/?$ ]] \
  || { >&2 echo "Fatal: could not parse remote ${git_remote}"; exit 1; }

git_domain=${BASH_REMATCH[7]}
git_protocol=${BASH_REMATCH[2]}
git_uri=${BASH_REMATCH[10]#/}
git_namespace=${git_uri}
git_project=${BASH_REMATCH[11]/.git}

##############
# Git config #
##############

git config user.name "${GIT_USER}"
git config user.email "${GIT_EMAIL}"

if [[ "${GIT_REPOSITORY_TYPE}" == "github" ]];then
  git_push_url="https://${GIT_TOKEN}:@github.com/${git_uri}/${git_project}.git"
  git remote add origin "${git_push_url}"
elif [[ "${GIT_REPOSITORY_TYPE}" == "gitlab" ]];then
  git_push_url="${git_protocol}://oauth2:${GIT_TOKEN}@${git_domain}/${git_uri}/${git_project}.git"
  git remote add origin "${git_push_url}"
fi

##################
# Tag generation #
##################

git_tag2add=''
git_tags_exists_arr=($(git tag))

>&2 echo "Last commit message: ${git_commit_message}"
case "${git_commit_message}" in
  *"[patch]"*|*"[fix]"* )
    if [[ ${#git_tags_exists_arr[@]} -eq 0 ]];then
      git_tag2add=0.0.1
    else
      git_tag2add=$(git semver --next-patch)
    fi
    ;;
  *"[minor]"*|*"[feat]"*|*"[feature]"* )
    if [[ ${#git_tags_exists_arr[@]} -eq 0 ]];then
      git_tag2add=0.1.0
    else
      git_tag2add=$(git semver --next-minor)
    fi
    ;;
  *"[major]"*|*"[breaking change]"* )
    if [[ ${#git_tags_exists_arr[@]} -eq 0 ]];then
      git_tag2add=1.0.0
    else
      git_tag2add=$(git semver --next-major)
    fi
    ;;
  *)
    >&2 echo "Keyword not detected. Doing nothing"
    ;;
esac

if [ "${git_tag2add}" != "" ]; then
  changelog_msg="Generate CHANGELOG.md for the release '${git_tag2add}'"
  changelog_tag_msg="Assigning new tag: ${git_tag2add}"
  changelog_commit_msg="Bump version to ${git_tag2add} [${SKIP_LABEL}]"
  changelog_push_msg="Version '${git_tag2add}' pushed to '${git_namespace}/${git_project}'"
  changelog_opts="--future-release=${git_tag2add}"
else
  changelog_msg="Generate CHANGELOG.md for unreleased"
  changelog_tag_msg=''
  changelog_commit_msg="Automatic changelog update [${SKIP_LABEL}]"
  changelog_push_msg="Changelog updated pushed to '${git_namespace}/${git_project}'"
  changelog_opts=''
fi

if [[ -n "${GIT_TOKEN}" ]];then
  changelog_opts+=" --token=${GIT_TOKEN}"
fi

##############################
# Changelog / Tag generation #
##############################

git checkout ${GIT_DEFAULT_BRANCH}

if [[ "${GIT_REPOSITORY_TYPE}" == "github" ]];then
  ##########
  # GITHUB #
  ##########

  git_release_url="https://github.com/${git_namespace}/${git_project}/tree/%s"

  >&2 echo "${changelog_msg}"
  docker run -it --rm -v "$(pwd)":/usr/local/src/your-app ferrarimarco/github-changelog-generator:1.14.3 \
                -u "${git_namespace}" -p "${git_project}" \
                --release-url="${git_release_url}" ${changelog_opts} \
                --unreleased-label="**Next release**" --no-compare-link
  >&2 echo "Adding CHANGELOG.md"
  git add CHANGELOG.md
  >&2 echo -e "\nCheck additional lines added to the changelog :\n"
  if git diff --unified=0 HEAD;then
    if egrep -o "^## \['[0-9]\.[0-9]\.[0-9]'\]" CHANGELOG.md;then
      >&2 echo -e "\nFatal: Found an entry with tag surrounded by ''\n"
      exit 1
    fi
    >&2 echo "Commit CHANGELOG.md"
    git commit -m "${changelog_commit_msg}" 2> /dev/null || true
  fi

elif [[ "${GIT_REPOSITORY_TYPE}" == "gitlab" ]];then
  :
else
  >&2 echo "Git repository type ('${GIT_REPOSITORY_TYPE}') is not recognized"
  exit 1
fi

######################
# Push CHANGELOG/tag #
######################
if [ "${git_tag2add}" != "" ]; then
  >&2 echo "${changelog_tag_msg}"
  git tag "${git_tag2add}" -a -m "${git_autotag_message}"
  if ! git ls-remote --exit-code origin refs/tags/${git_tag2add} 2> /dev/null;then
    [[ "${MKRELEASE_DUMMY}" -eq 0 ]] && git push origin --follow-tags || true
  else
    >&2 echo "Fatal: Tag '${git_tag2add}' already exist on remote."
    exit 1
  fi
else
  [[ "${MKRELEASE_DUMMY}" -eq 0 ]] && git push origin || true
fi

>&2 echo "${changelog_push_msg}"

######################################
# Display the tag generated / pushed #
######################################

>&3 echo "${git_tag2add}"
